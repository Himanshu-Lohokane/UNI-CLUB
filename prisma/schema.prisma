generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(STUDENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  clubMembers   ClubMember[]
  eventAttendees EventAttendee[]
  announcements Announcement[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Club {
  id          String      @id @default(cuid())
  name        String
  description String
  logo        String?
  banner      String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  members     ClubMember[]
  events      Event[]
  announcements Announcement[]
}

model ClubMember {
  id        String   @id @default(cuid())
  userId    String
  clubId    String
  role      ClubRole @default(MEMBER)
  joinedAt  DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  club      Club     @relation(fields: [clubId], references: [id], onDelete: Cascade)

  @@unique([userId, clubId])
}

model Event {
  id          String    @id @default(cuid())
  title       String
  description String
  startDate   DateTime
  endDate     DateTime
  location    String?
  image       String?
  clubId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  club        Club      @relation(fields: [clubId], references: [id], onDelete: Cascade)
  attendees   EventAttendee[]
}

model EventAttendee {
  id        String   @id @default(cuid())
  userId    String
  eventId   String
  status    AttendanceStatus @default(REGISTERED)
  checkedIn Boolean  @default(false)
  checkedInAt DateTime?

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String
  clubId    String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  club      Club     @relation(fields: [clubId], references: [id], onDelete: Cascade)
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  CLUB_ADMIN
  STUDENT
}

enum ClubRole {
  PRESIDENT
  VICE_PRESIDENT
  SECRETARY
  TREASURER
  MEMBER
}

enum AttendanceStatus {
  REGISTERED
  ATTENDED
  CANCELLED
} 
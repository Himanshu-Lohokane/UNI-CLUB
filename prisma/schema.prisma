generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  role           Role            @default(STUDENT)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  accounts       Account[]
  announcements  Announcement[]
  clubMembers    ClubMember[]
  eventAttendees EventAttendee[]
  sessions       Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Club {
  id            String         @id @default(cuid())
  name          String
  description   String
  logo          String?
  banner        String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  announcements Announcement[]
  members       ClubMember[]
  events        Event[]
}

model ClubMember {
  id       String   @id @default(cuid())
  userId   String
  clubId   String
  role     ClubRole @default(MEMBER)
  joinedAt DateTime @default(now())
  club     Club     @relation(fields: [clubId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, clubId])
}

model Event {
  id          String          @id @default(cuid())
  title       String
  description String
  startDate   DateTime
  endDate     DateTime
  location    String?
  image       String?
  clubId      String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  club        Club            @relation(fields: [clubId], references: [id], onDelete: Cascade)
  attendees   EventAttendee[]
}

model EventAttendee {
  id          String           @id @default(cuid())
  userId      String
  eventId     String
  status      AttendanceStatus @default(REGISTERED)
  checkedIn   Boolean          @default(false)
  checkedInAt DateTime?
  event       Event            @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String
  clubId    String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  club      Club     @relation(fields: [clubId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  CLUB_ADMIN
  STUDENT
}

enum ClubRole {
  PRESIDENT
  VICE_PRESIDENT
  SECRETARY
  TREASURER
  MEMBER
}

enum AttendanceStatus {
  REGISTERED
  ATTENDED
  CANCELLED
}
